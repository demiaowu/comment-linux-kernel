// 代码注释 (C) Roger Young, 2014-05-29, rogeryoung@outlook.com
// 主要参考文献 Linux内核完全注释，内核版本0.11，赵炯 编著
// 
// 该文件主要用于涉及处理时间和日期的函数


#ifndef _TIME_H
#define _TIME_H

#ifndef _TIME_T
#define _TIME_T
typedef long time_t;	//从GMT 1970年1月1日午夜0时起开始计的时间（秒）
#endif

#ifndef _SIZE_T
#define _SIZE_T
typedef unsigned int size_t;
#endif

#define CLOCKS_PER_SEC 100	//系统时钟滴答频率，100HZ

typedef long clock_t;		//从进程开始，系统经过的时钟滴答数

//struct tm用于内核从系统CMOS芯片中获取实时时钟信息，从而设定系统开机时间
struct tm {
	int tm_sec;	//秒数
	int tm_min;	//分钟
	int tm_hour;	//小时
	int tm_mday;	//一个月的天数
	int tm_mon;	//一年中的月份
	int tm_year;	//从1900年开始的年数
	int tm_wday;	//一星期中的某天
	int tm_yday;	//一年中的某天
	int tm_isdst;	//夏令时标志：正数，使用；0，没有使用；负数，无效
};

clock_t clock(void);	//确定处理器使用时间，返回程序所用处理器时间（滴答数）的近似值
time_t time(time_t * tp);	//取时间（秒），返回从1970-01-01 0：0：0开始的秒数（日历时间）
double difftime(time_t time2, time_t time1);	//计算时间差，返回time2与time1之间经过的秒数
time_t mktime(struct tm * tp);	//将tm结构转换为日历时间

char * asctime(const struct tm * tp);	//将tm结构转换成一个字符串，返回指向该字符串的指针
char * ctime(const time_t * tp);	//将日历时间转换成字符串形式
struct tm * gmtime(const time_t *tp);	//将日历时间转换成tm结构表示的UTC（Universal Time Code）时间
struct tm *localtime(const time_t * tp);	//将日历时间转换成tm结构表示的指定时区的时间
size_t strftime(char * s, size_t smax, const char * fmt, const struct tm * tp);
void tzset(void);

#endif
