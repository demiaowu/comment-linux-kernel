!//代码注释 (C) Roger Young, 2014-05-29, rogeryoung@outlook.com
!//主要参考文献 Linux内核完全注释，内核版本0.11，赵炯 编著
!
! //该程序主要负责从BIOS中获取系统数据（内存/磁盘等），并将其存放到系统内存的适当位置。
! 
!	setup.s		(C) 1991 Linus Torvalds
!
! setup.s is responsible for getting the system data from the BIOS,
! and putting them into the appropriate places in system memory.
! both setup.s and system has been loaded by the bootblock.
!
! This code asks the bios for memory/disk/other parameters, and
! puts them in a "safe" place: 0x90000-0x901FF, ie where the
! boot-block used to be. It is then up to the protected mode
! system to read them from there before the area is overwritten
! for buffer-blocks.
!

! NOTE! These had better be the same as in bootsect.s!
! //同bootsect.s
INITSEG  = 0x9000	! we move boot here - out of the way
SYSSEG   = 0x1000	! system loaded at 0x10000 (65536).
SETUPSEG = 0x9020	! this is the current segment

.globl begtext, begdata, begbss, endtext, enddata, endbss
.text
begtext:
.data
begdata:
.bss
begbss:
.text

entry start
start:

! ok, the read went well so we get current cursor position and save it for
! posterity.
! //取屏幕当前光标位置，并保存在内存0x90000处。（2字节）
! //BIOS中断0x10，功能号ah=0x03，读取光标位置。
! //输入：bh，页号
! //输出：ch，开始扫描线；cl，终止扫瞄线；dh，行号（0x00顶端）；dl，列号（0x00最左边）
	mov	ax,#INITSEG	! this is done in bootsect already, but...
	mov	ds,ax
	mov	ah,#0x03	! read cursor pos
	xor	bh,bh
	int	0x10		! save it in known place, con_init fetches
	mov	[0],dx		! it from 0x90000.

! Get memory size (extended mem, kB)
! //获取扩展内存的大小，并保存在内存0x90002处。（1字节）
! //BIOS中断0x15，功能号ah=0x88
! //输出：ax为从0x100000(1M)处开始的扩展内存的大小，以KB为单位。若出错则CF置位，ax为出错码。
	mov	ah,#0x88
	int	0x15
	mov	[2],ax

! Get video-card data:
! //获取显卡当前的显示模式。
! //BIOS中断0x10，功能号ah=0x0f
! //输出：ah，字符列数；al，显示模式；bh，当前显示页；

	mov	ah,#0x0f
	int	0x10
	mov	[4],bx		! bh = display page //0x90004处存放当前页
	mov	[6],ax		! al = video mode, ah = window width 
				! //0x90006存放显示模式，0x90007存放字符列数
				! //注：此处注释可能有误！！！！

! check for EGA/VGA and some config parameters
! //检查EGA/VGA（Enhanced Graphics Adapter/Video Graphics Array）并取参数
! //BIOS中断0x10，功能号ah=0x12，bl=0x10
! //输出：bh，显示状态，0x00为彩色模式，I/O端口为0x3dX，0x01为单色模式，I/O端口为0x3bX；
! 	//bl，安装的显示内存。0x00为64K，0x01为128K，0x03为256K；cx，显示卡特性参数。

	mov	ah,#0x12
	mov	bl,#0x10
	int	0x10
	mov	[8],ax
	mov	[10],bx
	mov	[12],cx

! Get hd0 data
! //取第一个硬盘的信息（复制硬盘参数表）

	mov	ax,#0x0000
	mov	ds,ax
	lds	si,[4*0x41]
	mov	ax,#INITSEG
	mov	es,ax
	mov	di,#0x0080
	mov	cx,#0x10
	rep
	movsb

! Get hd1 data

	mov	ax,#0x0000
	mov	ds,ax
	lds	si,[4*0x46]
	mov	ax,#INITSEG
	mov	es,ax
	mov	di,#0x0090
	mov	cx,#0x10
	rep
	movsb

! Check that there IS a hd1 :-)
! //检测系统是否有第2个硬盘，若没有，则把第2个表清零
! //BIOS中断0x13，功能号ah=0x15
! //输入：dl，驱动器号（0x8X，硬盘；0x80，第一个硬盘；0x81，第2个硬盘）
! //输出：ah，类型码，00，没有这个盘，CF置位；01，软驱，没有change-line支持；
! 		// 02，软驱，有change-line支持；03，硬盘

	mov	ax,#0x01500
	mov	dl,#0x81
	int	0x13
	jc	no_disk1
	cmp	ah,#3
	je	is_disk1
no_disk1:
	mov	ax,#INITSEG
	mov	es,ax
	mov	di,#0x0090
	mov	cx,#0x10
	mov	ax,#0x00
	rep
	stosb
is_disk1:

! now we want to move to protected mode ...
! //准备进入保护模式

	cli			! no interrupts allowed ! //从此开始不再允许中断。

! first we move the system to it's rightful place
! //首先将system模块移动到正确的位置

	mov	ax,#0x0000
	cld			! 'direction'=0, movs moves forward 
				! //cld清方向位，告诉程序si、di向前移动。
do_move:
	mov	es,ax		! destination segment
				! //es:di为目的地址（0x0000:0x0000)
	add	ax,#0x1000
	cmp	ax,#0x9000
	jz	end_move
	mov	ds,ax		! source segment
				! //ds:si为源地址（0x1000:0x0000）
	sub	di,di
	sub	si,si
	mov 	cx,#0x8000
	rep
	movsw
	jmp	do_move

! then we load the segment descriptors
! //加载段描述符

end_move:
	mov	ax,#SETUPSEG	! right, forgot this at first. didn't work :-)
	mov	ds,ax
	lidt	idt_48		! load idt with 0,0
				! //lidt用于加载中断描述符表寄存器，操作数有6字节。前2字节为描述符表的字节长度值
				! //后4字节为描述符表的32位线性基地址
	lgdt	gdt_48		! load gdt with whatever appropriate
				! //lgdt用于加载全局描述符表寄存器

! that was painless, now we enable A20
! //为了能够访问1MB以上的物理内存，首先开启A20地址线
	call	empty_8042		! //测试8042状态寄存器，等待输入缓冲器空
					! //只有当输入缓冲器为空时，才可以对其执行写命令
	mov	al,#0xD1		! command write
					! //0xD1命令码，表示要写数据到8042的P2端口。P2端口的位1用于A20线的选通。
	out	#0x64,al		! //数据要写到0x60端口
	call	empty_8042		! //等待输入缓冲器空，看命令是否被接受
	mov	al,#0xDF		! A20 on
					! //选通A20地址线的参数
	out	#0x60,al
	call	empty_8042		! //若此时输入缓冲器为空，则表示A20线已经选通

! well, that went ok, I hope. Now we have to reprogram the interrupts :-(
! we put them right after the intel-reserved hardware interrupts, at
! int 0x20-0x2F. There they won't mess up anything. Sadly IBM really
! messed this up with the original PC, and they haven't been able to
! rectify it afterwards. Thus the bios puts interrupts at 0x08-0x0f,
! which is used for the internal hardware interrupts as well. We just
! have to reprogram the 8259's, and it isn't fun.

! //0xeb是直接近跳转指令的操作码，带一个字节的相对位移值。因此跳转范围时-127到127。CPU通过将这个相对位移值加到EIP寄存器中形成一个新的有效的地址。此时EIP指向下一条被执行的指令。执行时所花费的CPU时钟周期数是7到10个。
! //0x00eb表示跳转值时0的一条指令，因此还是直接执行的下一条指令。这两条这令可以提供14到20个CPU时钟周期的延迟时间。
! //每个NOP指令的时钟周期时3个！

! //8259芯片主片端口是0x20-0x21，从片端口时0xA0-0xA1。输出值0x11表示初始化命令开始，它是ICW1命令字，表示边沿触发、多片8259级连、最后要发送ICW4命令字。
	mov	al,#0x11		! initialization sequence
	out	#0x20,al		! send it to 8259A-1		//发送到8259主芯片
	.word	0x00eb,0x00eb		! jmp $+2, jmp $+2		//"$"表示当前指令的地址
					! //直接使用机器码表示两条相对跳转指令，起延时作用
	out	#0xA0,al		! and to 8259A-2		//在发送到8259从芯片
	.word	0x00eb,0x00eb

	! //Linux系统硬件中断号被设置成从0x20开始
	mov	al,#0x20		! start of hardware int's (0x20)
	out	#0x21,al		! //送主芯片ICW2命令字，设置起始中断号，送奇端口
	.word	0x00eb,0x00eb

	mov	al,#0x28		! start of hardware int's 2 (0x28)
	out	#0xA1,al		! //送从芯片ICW2命令字，从芯片的其实中断号
	.word	0x00eb,0x00eb

	mov	al,#0x04		! 8259-1 is master
	out	#0x21,al		! //送主芯片ICW3命令字，主芯片的IR2连从芯片INT
	.word	0x00eb,0x00eb

	mov	al,#0x02		! 8259-2 is slave
	out	#0xA1,al		! //送从芯片ICW3命令字，表示从芯片的INT连到主芯片的IR2
	.word	0x00eb,0x00eb

	mov	al,#0x01		! 8086 mode for both
	out	#0x21,al		! //送主、从芯片ICW4命令字。8086模式；普通EOI、非缓冲方式。
					! //需发送指令来复位。初始化结束，芯片就绪
	.word	0x00eb,0x00eb
	out	#0xA1,al
	.word	0x00eb,0x00eb

	mov	al,#0xFF		! mask off all interrupts for now
	out	#0x21,al		! //屏蔽主、从芯片所有的中断请求
	.word	0x00eb,0x00eb
	out	#0xA1,al

! well, that certainly wasn't fun :-(. Hopefully it works, and we don't
! need no steenking BIOS anyway (except for the initial loading :-).
! The BIOS-routine wants lots of unnecessary data, and it's less
! "interesting" anyway. This is how REAL programmers do it.
!
! Well, now's the time to actually move into protected mode. To make
! things as simple as possible, we do no register set-up or anything,
! we let the gnu-compiled 32-bit programs do that. We just jump to
! absolute address 0x00000, in 32-bit protected mode.

	mov	ax,#0x0001	! protected mode (PE) bit
				! //保护模式比特位（PE）
	lmsw	ax		! This is it!
				! //加载机器状态字
	jmpi	0,8		! jmp offset 0 of segment 8 (cs)
				! //跳转至CS段偏移0处
! //上句中的偏移地址是0，而段值8是保护模式下的段选择符，用于选择描述符表和描述符表项以及所要求的特权级。
! //段选择符长度为为16位。位0-1表示请求的特权级；位2用于选择全局描述符表(0)还是局部描述符表(1);
! //位3-15是描述符表项的索引，指出选择第几项描述符。
! //段选择符8（0b0000,0000,0000,1000）表示请求特权级为0、使用全局描述符表，使用其第2个段描述符项。


! This routine checks that the keyboard command queue is empty
! No timeout is used - if this hangs there is something wrong with
! the machine, and we probably couldn't proceed anyway.
empty_8042:
	.word	0x00eb,0x00eb	! //两个跳转字令的机器码，相当于延时操作
	in	al,#0x64	! 8042 status port
				! //读AT键盘控制器状态寄存器
	test	al,#2		! is input buffer full?
				! //测试位1，输入缓冲器满？
	jnz	empty_8042	! yes - loop
	ret
! //全局描述符表开始处。描述符表由多个8字节长的描述符项组成。
gdt:
	! //第一个描述符，不用
	.word	0,0,0,0		! dummy

	! //在GDT中偏移量为0x08，是内核代码段选择符的值
	.word	0x07FF		! 8Mb - limit=2047 (2048*4096=8Mb)
	.word	0x0000		! base address=0
	.word	0x9A00		! code read/exec	//代码段为只读、可执行
	.word	0x00C0		! granularity=4096, 386	//颗粒度为4096，32位模式

	! //在GDT中偏移量为0x10，是内核数据段选择符的值
	.word	0x07FF		! 8Mb - limit=2047 (2048*4096=8Mb)
	.word	0x0000		! base address=0
	.word	0x9200		! data read/write	//数据段为可读可写
	.word	0x00C0		! granularity=4096, 386	//颗粒度为4096，32为模式

! //设置一个长度为0的空表
idt_48:
	.word	0			! idt limit=0
	.word	0,0			! idt base=0L

! //前两字节为gdt表的限长，后四字节为gdt表的线性基地址。
! //这里设置gdt表长度为8*2^(8)=2*2^(10)=2KB。每8字节组成一个段描述符项，所以表中可共有256项。
! //线性基地址为0x0009<<16+0x0200+gdt，即0x90200+gdt。
gdt_48:
	.word	0x800		! gdt limit=2048, 256 GDT entries
	.word	512+gdt,0x9	! gdt base = 0X9xxxx
	
.text
endtext:
.data
enddata:
.bss
endbss:
